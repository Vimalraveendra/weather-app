{"version":3,"sources":["components/Titles.js","components/WeatherForm.js","components/Weather.js","containers/App.js","serviceWorker.js","index.js"],"names":["Titles","Fragment","className","WeatherForm","getWeatherApi","onSubmit","type","name","placeholder","Weather","temperature","humidity","city","country","description","error","require","config","API_KEY","process","App","state","weatherLists","e","a","preventDefault","target","elements","value","fetch","resp","json","data","setState","main","temp","sys","weather","this","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"8WAgBeA,G,YAbD,WAEb,OACC,kBAAC,IAAMC,SAAP,KACA,6BACO,wBAAIC,UAAU,SAAd,gBACA,uBAAGA,UAAU,YAAb,6CCmBMC,G,MA1BK,SAAC,GAAmB,IAAlBC,EAAiB,EAAjBA,cACrB,OACC,kBAAC,IAAMH,SAAP,KACC,0BAAMI,SAAUD,GAChB,2BACIE,KAAK,OACRC,KAAK,OACLC,YAAY,iBACRN,UAAU,qBAEf,2BACCI,KAAK,OACLC,KAAK,UACLC,YAAY,oBACZN,UAAU,qBAEX,4BACAI,KAAK,SACLJ,UAAU,qBAFV,mBCYYO,G,MA3BC,SAAC,GAA0D,IAAzDC,EAAwD,EAAxDA,YAAYC,EAA4C,EAA5CA,SAASC,EAAmC,EAAnCA,KAAKC,EAA8B,EAA9BA,QAAQC,EAAsB,EAAtBA,YAAYC,EAAU,EAAVA,MAC/D,OACO,kBAAC,IAAMd,SAAP,KACE,yBAAKC,UAAU,QACZU,GAAQC,GACP,wCAAa,kCAAQD,EAAR,IAAeC,EAAf,MAEdH,GACC,2CAAgB,8BAAOA,EAAP,MAEjBC,GACC,wCAAa,kCAAQA,EAAR,MAEdG,GACC,uCAAY,8BAAOA,EAAP,MAEbC,GACC,+BAAKA,OCdnBC,EAAQ,IAAUC,SAElB,IAAMC,EAASC,mCAoFAC,E,2MA/EZC,MAAM,CACCX,YAAY,GACZC,SAAS,GACTW,aAAa,GACbV,KAAK,GACLC,QAAQ,GACRC,YAAY,GACZC,MAAM,I,EAKbX,c,sCAAgB,WAAOmB,GAAP,qBAAAC,EAAA,wDACbD,EAAEE,iBADW,SAGHb,EAAOW,EAAEG,OAAOC,SAASf,KAAKgB,MAC9Bf,EAASU,EAAEG,OAAOC,SAASd,QAAQe,OACtChB,IAAQC,EALF,iCAMcgB,MAAM,yFAAD,OAA0FjB,EAA1F,YAAkGC,EAAlG,kBAAmHK,EAAnH,kBANnB,cAMCY,EAND,iBAOcA,EAAKC,OAPnB,QAOCC,EAPD,OAQJ,EAAKC,SAAS,CACbvB,YAAYsB,EAAKE,KAAKC,KACtBxB,SAAUqB,EAAKE,KAAKvB,SACpBC,KAAKoB,EAAKzB,KACVM,QAAQmB,EAAKI,IAAIvB,QACjBC,YAAYkB,EAAKK,QAAQ,GAAGvB,cAbzB,wBAkBL,EAAKmB,SAAS,CACZlB,MAAM,sCAnBH,0DAwBL,EAAKkB,SAAS,CAAClB,MAAM,yCAxBhB,wD,8HA8Bd,OACD,kBAAC,IAAMd,SAAP,KACA,6BACE,4BAAQC,UAAU,cAChB,4CAGF,yBAAKA,UAAU,QACd,yBAAKA,UAAU,gBAEX,yBAAKA,UAAU,qBACb,kBAAC,EAAD,OAEF,yBAAKA,UAAU,qBAEb,kBAAC,EAAD,CACAE,cAAekC,KAAKlC,gBAGpB,kBAAC,EAAD,CACGM,YAAa4B,KAAKjB,MAAMX,YACxBC,SAAU2B,KAAKjB,MAAMV,SACrBG,YAAawB,KAAKjB,MAAMP,YACxBF,KAAM0B,KAAKjB,MAAMT,KACjBC,QAASyB,KAAKjB,MAAMR,QACpBE,MAAOuB,KAAKjB,MAAMN,iB,GArEhBwB,aCCEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCXNC,IAASC,OAAO,kBAAC,EAAD,MAAQC,SAASC,eAAe,SD0H1C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC,iB","file":"static/js/main.94143ee2.chunk.js","sourcesContent":["import React from 'react';\nimport './Title.css';\n\nconst Titles =() =>{\n\n\treturn(\n\t\t<React.Fragment>\n\t\t<div>\n         <h1 className='title'>Find weather</h1>\n         <p className='subtitle'>Find out the weather of countries....</p>\n         </div>\n\t  </React.Fragment>\n       \n\t\t)\n}\n\nexport default Titles;","import React from 'react';\nimport './WeatherForm.css'\nconst WeatherForm = ({getWeatherApi})=>{\n\treturn(\n\t\t<React.Fragment>\n\t\t <form onSubmit={getWeatherApi}>\n\t\t <input \n\t\t     type='text' \n\t\t\t name='city'\n\t\t\t placeholder='Enter the city'\n\t     \t className='formSearch-input'\n\t\t />\n\t\t <input \n\t\t\t type='text' \n\t\t\t name='country' \n\t\t\t placeholder='Enter the country'\n\t\t\t className='formSearch-input'\n\t\t />\n\t\t <button \n\t\t type='submit'\n\t\t className='formSearch-button'\n\t\t >Get Weather</button>\n\t\t </form>\n\t\t</React.Fragment>\n\n\t\t)\n}\n\nexport default WeatherForm;","import React from 'react';\nimport './Weather.css';\n\nconst Weather = ({temperature,humidity,city,country,description,error}) =>{\n\treturn(\n        <React.Fragment>\n          <div className='info'>\n            {city && country &&\n              <p>Location: <span> {city},{country} </span></p>\n            }\n            {temperature &&\n              <p>Temperature: <span>{temperature} </span></p>\n            }\n            {humidity &&\n              <p>Humidity: <span> {humidity} </span></p>\n            }\n            {description &&\n              <p>Weather: <span>{description} </span></p>\n            }\n            {error && \n              <p> {error}</p>\n            }\n\n          </div>\n\n        </React.Fragment>\n\n\t\t)\n}\n\nexport default Weather;","import React, {Component} from 'react';\n\nimport './App.css';\nimport Titles from '../components/Titles';\nimport WeatherForm from '../components/WeatherForm';\nimport Weather from '../components/Weather';\nrequire('dotenv').config()\n\nconst API_KEY= process.env.REACT_APP_API_KEY\n\n\nclass App extends Component{\n   \n   state={\n          temperature:'',\n          humidity:'',\n          weatherLists:[],\n          city:'',\n          country:'',\n          description:'',\n          error:''\n   }\n    \n\n\n   getWeatherApi = async (e)=>{\n      e.preventDefault();\n      try{\n          const city = e.target.elements.city.value;\n          const country= e.target.elements.country.value;\n          if(city && country){\n              const resp = await fetch(`https://cors-anywhere.herokuapp.com/https://api.openweathermap.org/data/2.5/weather?q=${city},${country}&appid=${API_KEY}&units=metric`)\n              const data = await resp.json()\n               this.setState({\n                temperature:data.main.temp,\n                humidity: data.main.humidity,\n                city:data.name,\n                country:data.sys.country,\n                description:data.weather[0].description,\n                })   \n              \n                }else{\n\n              this.setState({\n                error:'Please enter the city and country'\n              })\n\n             }\n            }catch(err){\n              this.setState({error:'Please enter proper city and country'})\n          } \n       }\n  \n   \n   render(){\n     return (\n    <React.Fragment>\n    <div>\n      <header className=\"App-header\">\n        <h1>Weather App</h1>\n\n      </header>\n      <div className='main'>\n       <div className='flex-wrapper'>\n         \n           <div className='column title-left'>\n             <Titles />\n           </div>\n           <div className='column form-right'>\n\n             <WeatherForm \n             getWeatherApi={this.getWeatherApi}\n             />\n\n             <Weather\n                temperature={this.state.temperature}\n                humidity={this.state.humidity}\n                description={this.state.description}\n                city={this.state.city}\n                country={this.state.country}\n                error={this.state.error}\n              />\n              </div>\n         </div>\n      </div>\n    </div>\n    </React.Fragment>\n  );\n}\n   }\n  \n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './containers/App';\nimport * as serviceWorker from './serviceWorker';\n\n\nReactDOM.render(<App/>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}